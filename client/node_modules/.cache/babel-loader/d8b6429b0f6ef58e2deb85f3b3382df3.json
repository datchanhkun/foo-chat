{"ast":null,"code":"const io = require('socket.io-client');\n\nexport const socket = io.connect('');\nexport function startIOConnection() {\n  socket.connect();\n}\nexport const setRooms = () => {\n  socket.emit(\"setRooms\");\n};\nexport const receiveMessageForGroup = setGroupMessageHandler => {\n  socket.on('groupMessage', setGroupMessageHandler);\n};\nexport const unRegisterReceiveMessageForGroup = () => {\n  socket.off('groupMessage');\n};\nexport const updateRoomMembersStatus = setGroupMembersStatus => {\n  socket.on('updateRoomMemberStatus', setGroupMembersStatus);\n};\nexport const unRegisterUpdateRoomMembersStatus = () => {\n  socket.off('updateRoomMemberStatus');\n};\nexport const updateUserInfo = userData => {\n  socket.emit(\"updateUserData\", {\n    userData\n  });\n};\nexport const setUserInfo = setUserDataHandler => {\n  socket.on(\"setUserData\", setUserDataHandler);\n};\nexport const UnRegisterSetUserInfo = () => {\n  socket.off(\"setUserData\");\n};\nexport const enterRoom = (username, roomId) => {\n  socket.emit(\"enter\", {\n    username,\n    roomId\n  });\n};\nexport const exitRoom = (username, roomId) => {\n  socket.emit(\"exit\", {\n    username,\n    roomId\n  });\n};\nexport const disconnectSocket = () => {\n  socket.close();\n};\n/**PRIVATE MESSAGES **/\n\nexport const connectOnAuth = username => {\n  socket.emit(\"login\", {\n    username: username\n  });\n};\nexport const sendPrivateMessage = (message, sender, receiver, location) => {\n  return socket.emit(\"messageUser\", {\n    message,\n    sender,\n    receiver,\n    location\n  }, response => {\n    return response;\n  });\n};\nexport const receivePrivateMessage = receiveMessageHandler => {\n  socket.on('privateMessage', receiveMessageHandler);\n};\nexport const unRegisterReceivePrivateMessage = () => {\n  socket.off('receiveVideoCall');\n};\n/**GROUP MESSAGING**/\n\nexport const changeOnlineUsers = changeOnlineUsersHandler => {\n  socket.on(\"changeOnlineUsers\", changeOnlineUsersHandler);\n};\nexport const setOnlineUsers = onlineUsersHandler => {\n  socket.on(\"onlineUsers\", onlineUsersHandler);\n};\nexport const getOnlineUsers = () => {\n  socket.emit(\"getOnlineUsers\");\n};\nexport const getAllUsers = () => {\n  socket.emit(\"allUsers\");\n};\nexport const setAllUsersHandler = allUsersHandler => {\n  socket.on(\"setAllUsers\", allUsersHandler);\n};\nexport const UnRegisterSetAllUsersHandler = allUsersHandler => {\n  socket.off(\"setAllUsers\");\n};\nexport const unRegisterSetOnlineUsers = () => {\n  socket.off(\"onlineUsers\");\n};\nexport const sendMessageToGroup = (message, groupId) => {\n  let userId = sessionStorage.getItem(\"userId\");\n  return socket.emit(\"messageToGroup\", {\n    message: message,\n    groupId: groupId,\n    senderId: userId\n  }, error => {\n    if (error) {}\n  });\n};","map":{"version":3,"sources":["/Users/macbook/Desktop/App Foo Chat/foo-chat/client/src/services/socketIo.js"],"names":["io","require","socket","connect","startIOConnection","setRooms","emit","receiveMessageForGroup","setGroupMessageHandler","on","unRegisterReceiveMessageForGroup","off","updateRoomMembersStatus","setGroupMembersStatus","unRegisterUpdateRoomMembersStatus","updateUserInfo","userData","setUserInfo","setUserDataHandler","UnRegisterSetUserInfo","enterRoom","username","roomId","exitRoom","disconnectSocket","close","connectOnAuth","sendPrivateMessage","message","sender","receiver","location","response","receivePrivateMessage","receiveMessageHandler","unRegisterReceivePrivateMessage","changeOnlineUsers","changeOnlineUsersHandler","setOnlineUsers","onlineUsersHandler","getOnlineUsers","getAllUsers","setAllUsersHandler","allUsersHandler","UnRegisterSetAllUsersHandler","unRegisterSetOnlineUsers","sendMessageToGroup","groupId","userId","sessionStorage","getItem","senderId","error"],"mappings":"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","sourcesContent":["const io = require('socket.io-client')\r\nexport const socket = io.connect('')\r\n\r\n\r\nexport  function startIOConnection (){\r\n    socket.connect();\r\n}\r\n\r\n\r\nexport const setRooms = () =>{\r\n    socket.emit(\"setRooms\");\r\n}\r\n\r\nexport const receiveMessageForGroup = (setGroupMessageHandler) =>{\r\n    socket.on('groupMessage', setGroupMessageHandler)\r\n}\r\n\r\nexport const unRegisterReceiveMessageForGroup = () =>{ \r\n    socket.off('groupMessage')\r\n}\r\n\r\nexport const updateRoomMembersStatus = (setGroupMembersStatus) =>{ \r\n    socket.on('updateRoomMemberStatus', setGroupMembersStatus)\r\n}\r\n\r\nexport const unRegisterUpdateRoomMembersStatus = () =>{ \r\n    socket.off('updateRoomMemberStatus')\r\n}\r\n\r\nexport const updateUserInfo = (userData) => {\r\n    socket.emit(\"updateUserData\", {userData})\r\n}\r\n\r\nexport const setUserInfo = (setUserDataHandler) => {\r\n    socket.on(\"setUserData\", setUserDataHandler)\r\n}\r\n\r\nexport const UnRegisterSetUserInfo = () => {\r\n    socket.off(\"setUserData\")\r\n}\r\n\r\nexport const enterRoom = (username,roomId) => {\r\n    socket.emit(\"enter\", {username, roomId})\r\n}\r\n\r\nexport const exitRoom = (username,roomId) => {\r\n    socket.emit(\"exit\", {username, roomId})\r\n}\r\n \r\nexport const disconnectSocket = () => {\r\n    socket.close()\r\n}\r\n\r\n/**PRIVATE MESSAGES **/\r\n\r\nexport const connectOnAuth = (username) => {\r\n    socket.emit(\"login\", {username:username})\r\n}\r\n\r\nexport const sendPrivateMessage =  (message, sender, receiver, location) =>{      \r\n    return socket.emit(\"messageUser\", {\r\n       message,\r\n       sender,\r\n       receiver,\r\n       location\r\n       }, (response)=>{\r\n           \r\n       return response\r\n   })\r\n}\r\n\r\nexport const receivePrivateMessage = (receiveMessageHandler) => {\r\n    socket.on('privateMessage', receiveMessageHandler)    \r\n}\r\n\r\nexport const unRegisterReceivePrivateMessage =() =>{      \r\n    socket.off('receiveVideoCall')\r\n}\r\n\r\n/**GROUP MESSAGING**/\r\nexport const changeOnlineUsers = (changeOnlineUsersHandler) => {\r\n    socket.on(\"changeOnlineUsers\", changeOnlineUsersHandler);\r\n}\r\n\r\nexport const setOnlineUsers = (onlineUsersHandler) => {\r\n    socket.on(\"onlineUsers\", onlineUsersHandler);\r\n}\r\n\r\nexport const getOnlineUsers = () => {\r\n    socket.emit(\"getOnlineUsers\");\r\n}\r\n\r\nexport const getAllUsers = () => {\r\n    socket.emit(\"allUsers\");\r\n}\r\n\r\nexport const setAllUsersHandler = (allUsersHandler) => {\r\n    socket.on(\"setAllUsers\", allUsersHandler);\r\n}\r\n\r\nexport const UnRegisterSetAllUsersHandler = (allUsersHandler) => {\r\n    socket.off(\"setAllUsers\");\r\n}\r\n\r\nexport const unRegisterSetOnlineUsers = () => {\r\n    socket.off(\"onlineUsers\");\r\n}\r\n\r\nexport const sendMessageToGroup = (message, groupId) =>{    \r\n    let userId = sessionStorage.getItem(\"userId\");\r\n    return socket.emit(\"messageToGroup\", {\r\n        message: message,\r\n        groupId: groupId,\r\n        senderId: userId\r\n        }, (error)=>{\r\n        if(error){            \r\n        }\r\n    })\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}