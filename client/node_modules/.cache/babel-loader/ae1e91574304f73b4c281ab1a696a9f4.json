{"ast":null,"code":"var _jsxFileName = \"/Users/macbook/Desktop/App Foo Chat/simply-chat/client/src/components/private-messages/private-messages.component.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { receivePrivateMessage, unRegisterReceivePrivateMessage } from '../../services/socketIo';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faLocationArrow, faMusic, faUser } from '@fortawesome/free-solid-svg-icons';\nimport ChatMessenger from '../chat-messages/chat-messages.component';\nimport ChatSendBox from '../chat-send-box/chat-send-box.component';\nimport { getMessages } from '../../redux/action/message.action';\nimport { getLocation } from '../../redux/action/user.action';\nimport { Link } from 'react-router-dom';\n/**\r\n  * Handles messages between two users\r\n*/\n\nclass PrivateMessages extends Component {\n  constructor(props) {\n    super(props);\n\n    this.scrollToBottom = () => {\n      this.chatArea.current.scroll(0, this.chatArea.current.scrollHeight);\n    };\n\n    this.setReceivedMessage = message => {\n      this.setState(prevState => ({ ...prevState,\n        messages: [...prevState.messages, message]\n      }), () => this.scrollToBottom());\n    };\n\n    this.getUserLocation = () => {\n      if (!navigator.geolocation) {\n        return alert(\"Sorry this browser doesn't support geolocation\");\n      }\n\n      navigator.geolocation.getCurrentPosition(position => {\n        let lat = position.coords.latitude;\n        let long = position.coords.longitude;\n        let coords = {\n          lat,\n          long\n        };\n        this.props.getLocation(coords).then(res => {\n          this.setState(prevState => ({ ...prevState,\n            location: res\n          }));\n        });\n      });\n    };\n\n    this.chatArea = React.createRef();\n    this.state = {\n      currentUser: props.currentUser,\n      location: null,\n      messages: props.messages\n    };\n  }\n\n  componentDidMount() {\n    receivePrivateMessage(this.setReceivedMessage);\n    this.scrollToBottom();\n    this.props.getMessages(this.state.currentUser._id, this.props.recipient._id);\n  }\n  /**\r\n   * we update the messages  with new props fom redux\r\n   * and the current recipient changes when we click a user\r\n   * @param {*} prevProps \r\n   */\n\n\n  componentDidUpdate(prevProps) {\n    if (this.props.messages !== prevProps.messages) {\n      this.setState(prevState => ({ ...prevState,\n        messages: this.props.messages,\n        recipient: this.props.recipient\n      }), () => this.scrollToBottom());\n    }\n  }\n\n  componentWillUnmount() {\n    unRegisterReceivePrivateMessage();\n  }\n  /**\r\n   * scroll to the bottom of the chat window\r\n   */\n\n\n  render() {\n    const {\n      messages\n    } = this.state;\n    const {\n      recipient\n    } = this.props;\n    console.log(recipient);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"chat-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"chat-area\",\n      ref: this.chatArea,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 4\n      }\n    }, messages && messages.map(message => /*#__PURE__*/React.createElement(ChatMessenger, {\n      message: message,\n      location: this.state.location,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 6\n      }\n    }))), /*#__PURE__*/React.createElement(ChatSendBox, {\n      location: this.state.location,\n      recipient: recipient,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 4\n      }\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  currentUser: state.user.currentUser,\n  errors: state.errors,\n  allUsers: state.user.users,\n  messages: state.messages.messages\n});\n\nconst mapDispatchToProps = dispatch => ({\n  getLocation: coords => dispatch(getLocation(coords)),\n  getMessages: (userId, recipientId) => dispatch(getMessages(userId, recipientId))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PrivateMessages);","map":{"version":3,"sources":["/Users/macbook/Desktop/App Foo Chat/simply-chat/client/src/components/private-messages/private-messages.component.jsx"],"names":["React","Component","connect","receivePrivateMessage","unRegisterReceivePrivateMessage","FontAwesomeIcon","faLocationArrow","faMusic","faUser","ChatMessenger","ChatSendBox","getMessages","getLocation","Link","PrivateMessages","constructor","props","scrollToBottom","chatArea","current","scroll","scrollHeight","setReceivedMessage","message","setState","prevState","messages","getUserLocation","navigator","geolocation","alert","getCurrentPosition","position","lat","coords","latitude","long","longitude","then","res","location","createRef","state","currentUser","componentDidMount","_id","recipient","componentDidUpdate","prevProps","componentWillUnmount","render","console","log","map","mapStateToProps","user","errors","allUsers","users","mapDispatchToProps","dispatch","userId","recipientId"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport {connect} from 'react-redux';\r\nimport { receivePrivateMessage, unRegisterReceivePrivateMessage } from '../../services/socketIo';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faLocationArrow, faMusic, faUser } from '@fortawesome/free-solid-svg-icons';\r\nimport  ChatMessenger  from '../chat-messages/chat-messages.component';\r\nimport ChatSendBox from '../chat-send-box/chat-send-box.component';\r\nimport { getMessages } from '../../redux/action/message.action';\r\nimport { getLocation } from '../../redux/action/user.action';\r\nimport { Link } from 'react-router-dom';\r\n\r\n/**\r\n  * Handles messages between two users\r\n*/\r\n \r\nclass PrivateMessages extends Component {\r\n\tconstructor (props) {\r\n\t\tsuper(props);\r\n\t\tthis.chatArea = React.createRef()\r\n\t\tthis.state ={\r\n\t\t  currentUser:props.currentUser,\r\n\t\t  location:null,\r\n\t\t  messages:props.messages\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount(){\r\n\t  receivePrivateMessage(this.setReceivedMessage);    \r\n\t  this.scrollToBottom();\r\n\t  this.props.getMessages(this.state.currentUser._id, this.props.recipient._id);\r\n\t}\r\n\r\n\t/**\r\n\t * we update the messages  with new props fom redux\r\n\t * and the current recipient changes when we click a user\r\n\t * @param {*} prevProps \r\n\t */\r\n\tcomponentDidUpdate(prevProps) {      \r\n\t  if (this.props.messages !== prevProps.messages) {          \r\n\t\t  this.setState((prevState) =>({\r\n\t\t\t...prevState,\r\n\t\t\tmessages: this.props.messages,\r\n\t\t\trecipient:this.props.recipient,\r\n\t\t  }), () =>  this.scrollToBottom()\r\n\t\t)\r\n\t  }\r\n\t}\r\n\r\n\tcomponentWillUnmount(){\r\n\t  unRegisterReceivePrivateMessage()\r\n\t}\r\n\r\n\t/**\r\n\t * scroll to the bottom of the chat window\r\n\t */\r\n\tscrollToBottom = () =>{\r\n\t  this.chatArea.current.scroll(0, this.chatArea.current.scrollHeight)\r\n\t}\r\n\r\n\t/**\r\n\t * add message that is sent to this user to the message list\r\n\t * @param {*} message \r\n\t */\r\n\tsetReceivedMessage = (message) =>{ \r\n\t  this.setState(prevState => ({\r\n\t\t...prevState,\r\n\t\tmessages: [...prevState.messages, message ]\r\n\t  }), () => this.scrollToBottom()\r\n\t  )}\r\n\r\n\t/**\r\n\t * activate the get location with geolocation api when turned on\r\n\t * @param {*} type \r\n\t */\r\n\t\r\n\r\n\tgetUserLocation = () => {\r\n\t\tif (!navigator.geolocation) {\r\n\t\t\treturn alert(\"Sorry this browser doesn't support geolocation\")\r\n\t\t}    \r\n\r\n\t\tnavigator.geolocation.getCurrentPosition((position)=>{\r\n\t\t\tlet lat = position.coords.latitude\r\n\t\t\tlet long = position.coords.longitude\r\n\t\t\tlet coords = {lat, long}\r\n\t\t\tthis.props.getLocation(coords)\r\n\t\t\t.then((res)=>{\r\n\t\t\t\tthis.setState((prevState)=>({\r\n\t\t\t\t\t...prevState,\r\n\t\t\t\t\tlocation: res\r\n\t\t\t\t\t})\r\n\t\t\t\t)\r\n\t\t\t})\r\n\t\t\t})\r\n\t}\r\n  \r\n\t\r\n\trender() {\r\n\t\tconst {messages} = this.state;\r\n\t\tconst {recipient} = this.props;\r\n\t\tconsole.log(recipient)\r\n\t\treturn (\r\n\t\t\t<div className='chat-container'>\r\n\t\t\t{/* <div className='chat-area-header'>\r\n\t\t\t\t<div className=\"user\">\r\n\t\t\t\t\t<img\r\n\t\t\t\t\t\t\tsrc={recipient.image || recipient.userImage}\r\n\t\t\t\t\t\talt=\"your profile\"\r\n\t\t\t\t\t\tclassName=\"user__photo\" />\r\n\t\t\t\t\t<div className=\"user__username\">{recipient.username}</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className='icons'>\r\n\t\t\t\t\t\t<Link\r\n\t\t\t\t\t\t\tto={{\r\n\t\t\t\t\t\t\t\tpathname: `/user/${recipient._id}/profile`,\r\n\t\t\t\t\t\t\t\tstate: { userData: recipient }\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<FontAwesomeIcon\r\n\t\t\t\t\t\t\t\tclassName='icon'\r\n\t\t\t\t\t\t\t\ticon={faUser} />\r\n\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t<FontAwesomeIcon \r\n\t\t\t\t\t\tclassName='icon'\r\n\t\t\t\t\t\tonClick={()=>this.getUserLocation()} \r\n\t\t\t\t\t\ticon={faLocationArrow}/>\r\n\t\t\t\t</div>\r\n\t\t\t</div> */}\r\n\t\t\t<div className='chat-area' ref={this.chatArea}>\r\n\t\t\t\t{ messages &&\r\n\t\t\t\tmessages.map((message) =>(\r\n\t\t\t\t\t<ChatMessenger message={message}\r\n\t\t\t\t\tlocation = {this.state.location}/>\r\n\t\t\t\t\t))\r\n\t\t\t\t\t}\r\n\t\t\t</div>\r\n\t\t\t<ChatSendBox \r\n\t\t\t\tlocation={this.state.location}\r\n\t\t\t\trecipient={recipient}/>\r\n\t\t</div>\r\n\t  )\r\n\t}\r\n}\r\n\r\nconst mapStateToProps = (state) =>({\r\n  currentUser:state.user.currentUser,\r\n  errors : state.errors,\r\n  allUsers: state.user.users,\r\n  messages: state.messages.messages\r\n})\r\n  \r\nconst mapDispatchToProps = dispatch => ({\r\n  getLocation: (coords) => dispatch(getLocation(coords)) , \r\n  getMessages: (userId, recipientId) => dispatch(getMessages(userId, recipientId)),\r\n})\r\n\r\n\r\nexport default connect(mapStateToProps , mapDispatchToProps)(PrivateMessages);"]},"metadata":{},"sourceType":"module"}