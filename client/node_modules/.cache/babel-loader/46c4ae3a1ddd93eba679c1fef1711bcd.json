{"ast":null,"code":"import { GET_GROUPS, GET_ROOM } from \"../actionType/group.actionType\";\nimport { removeError } from \"./errors.action\";\nimport { restApi } from \"../../services/api\";\nimport { socket } from \"../../services/socketIo\";\nimport { toast } from 'react-toastify';\nexport const setGroups = groups => ({\n  type: GET_GROUPS,\n  payload: groups\n});\nexport const setRoom = roomInfo => ({\n  type: GET_ROOM,\n  payload: roomInfo\n});\nexport const getAllGroups = () => {\n  return dispatch => {\n    return restApi(\"get\", \"/api/groups\").then(response => {\n      dispatch(setGroups(response));\n    }).catch(error => {});\n  };\n};\nexport const getGroupMembersById = groupId => {\n  let userId = sessionStorage.getItem(\"userId\");\n  return dispatch => {\n    return new Promise((resolve, reject) => {\n      return restApi(\"get\", `/user/${userId}/group/${groupId}/`).then(response => {\n        dispatch(removeError());\n        console.log(response);\n        dispatch(setRoom(response));\n        return resolve(response);\n      }).catch(error => {\n        reject();\n      });\n    });\n  };\n};\nexport const createGroup = group => {\n  let userId = sessionStorage.getItem(\"userId\");\n  return dispatch => {\n    return restApi(\"post\", `/user/${userId}/create-group/`, group).then(response => {\n      dispatch(removeError());\n      dispatch(setGroups(response.groups));\n      dispatch(joinGroup(response.groupId));\n      toast.success('Group mới đã được tạo');\n    }).then(() => {\n      socket.emit('create', {\n        roomName: group.name\n      }, error => {});\n    }).catch(error => {\n      toast.error('Lỗi, Vui lòng thử lại sau');\n    });\n  };\n};\nexport const joinGroup = groupId => {\n  let userId = sessionStorage.getItem(\"userId\");\n  return dispatch => {\n    return restApi(\"get\", `/user/${userId}/group/${groupId}/join`).then(response => {\n      dispatch(removeError());\n      toast.success('Bạn đã tham gia group');\n      return dispatch(setGroups(response));\n    }).catch(error => {\n      toast.error('Lỗi, vui lòng thử lại sau');\n    });\n  };\n};\nexport const leaveGroup = groupId => {\n  let userId = sessionStorage.getItem(\"userId\");\n  return dispatch => {\n    return restApi(\"get\", `/user/${userId}/group/${groupId}/leave`).then(response => {\n      toast.success('Bạn đã rời group');\n      return dispatch(setGroups(response));\n    }).catch(error => {\n      toast.error('Lỗi');\n    });\n  };\n};\nexport const deleteGroup = groupId => {\n  let userId = sessionStorage.getItem(\"userId\");\n  return dispatch => {\n    return restApi(\"get\", `/user/${userId}/group/${groupId}/delete`).then(response => {\n      dispatch(removeError());\n      toast.success('You have deleted group');\n      return dispatch(setGroups(response));\n    }).catch(error => {\n      toast.error('Something went wrong. Try again later');\n    });\n  };\n};","map":{"version":3,"sources":["/Users/macbook/Desktop/App Foo Chat/foo-chat/client/src/redux/action/group.action.js"],"names":["GET_GROUPS","GET_ROOM","removeError","restApi","socket","toast","setGroups","groups","type","payload","setRoom","roomInfo","getAllGroups","dispatch","then","response","catch","error","getGroupMembersById","groupId","userId","sessionStorage","getItem","Promise","resolve","reject","console","log","createGroup","group","joinGroup","success","emit","roomName","name","leaveGroup","deleteGroup"],"mappings":"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","sourcesContent":["import {GET_GROUPS, GET_ROOM} from \"../actionType/group.actionType\";\r\nimport { removeError } from \"./errors.action\";\r\nimport { restApi } from \"../../services/api\";\r\nimport { socket } from \"../../services/socketIo\";\r\nimport { toast } from 'react-toastify';\r\n\r\nexport const setGroups = (groups) =>({\r\n    type: GET_GROUPS,\r\n    payload: groups\r\n}) \r\n\r\nexport const setRoom = (roomInfo) =>({\r\n    type: GET_ROOM,\r\n    payload: roomInfo\r\n}) \r\n\r\nexport const getAllGroups = () => {\r\n    return dispatch =>{\r\n        return restApi (\"get\", \"/api/groups\")\r\n            .then((response)=>{       \r\n                dispatch(setGroups(response))\r\n            })\r\n            .catch((error)=>{   \r\n               }\r\n            )\r\n    }\r\n}\r\n\r\nexport const getGroupMembersById = (groupId) => {\r\n    let userId = sessionStorage.getItem(\"userId\");\r\n    return dispatch =>{\r\n        return new Promise((resolve, reject)=>{\r\n        return restApi (\"get\", `/user/${userId}/group/${groupId}/`)\r\n            .then((response)=>{\r\n                dispatch(removeError())\r\n                console.log(response)\r\n                dispatch(setRoom(response))\r\n                return resolve(response)   \r\n            })\r\n            .catch((error)=>{\r\n                reject()\r\n            })\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const createGroup = (group) =>{\r\n    let userId = sessionStorage.getItem(\"userId\");\r\n    return dispatch =>{\r\n        return restApi (\"post\", `/user/${userId}/create-group/`, group)\r\n            .then((response)=>{\r\n                dispatch(removeError())            \r\n                dispatch(setGroups(response.groups))\r\n                dispatch(joinGroup(response.groupId))\r\n                toast.success('Group mới đã được tạo')\r\n            })\r\n            .then(()=>{\r\n                socket.emit('create', {roomName: group.name }, (error) => {\r\n                })\r\n            })\r\n            .catch((error)=>{\r\n                toast.error('Lỗi, Vui lòng thử lại sau')\r\n\r\n                }\r\n            )\r\n        }\r\n}\r\n\r\n\r\nexport const joinGroup =  (groupId) => {\r\n    let userId = sessionStorage.getItem(\"userId\");\r\n    return dispatch =>{\r\n        return restApi (\"get\", `/user/${userId}/group/${groupId}/join`)\r\n            .then((response)=>{\r\n                dispatch(removeError())         \r\n                toast.success('Bạn đã tham gia group')\r\n                return dispatch(setGroups(response))\r\n\r\n            })               \r\n            .catch((error)=>{\r\n                toast.error('Lỗi, vui lòng thử lại sau')\r\n\r\n            }\r\n        )\r\n    \r\n    }\r\n}\r\n\r\n\r\nexport const leaveGroup =  (groupId) =>{\r\n    let userId = sessionStorage.getItem(\"userId\");\r\n    return dispatch =>{\r\n        return restApi (\"get\", `/user/${userId}/group/${groupId}/leave`)\r\n            .then((response)=>{\r\n                toast.success('Bạn đã rời group')\r\n                return dispatch(setGroups(response))\r\n                })\r\n            .catch((error)=>{\r\n                toast.error('Lỗi')\r\n\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport const deleteGroup =  (groupId) =>{\r\n    let userId = sessionStorage.getItem(\"userId\");\r\n    return dispatch =>{        \r\n        return restApi (\"get\", `/user/${userId}/group/${groupId}/delete`)\r\n            .then((response)=>{\r\n                dispatch(removeError())            \r\n                toast.success('You have deleted group')\r\n                return dispatch(setGroups(response))\r\n                })\r\n            .catch((error)=>{\r\n                toast.error('Something went wrong. Try again later')\r\n            }\r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}