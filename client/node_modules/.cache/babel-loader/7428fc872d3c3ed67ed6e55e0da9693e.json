{"ast":null,"code":"import { GET_MESSAGES } from \"../actionType/user.actionType\";\nimport { restApi } from \"../../services/api\";\nimport { removeError, addError } from \"./errors.action\";\nimport { startFetching } from \"./fetch.actions\";\nimport { setCurrentUser } from \"./user.action\";\nexport const loadMessages = messages => ({\n  type: GET_MESSAGES,\n  payload: messages\n});\nexport const getMessages = (userId, recipientId) => {\n  return dispatch => {\n    return new Promise((resolve, reject) => {\n      return restApi(\"get\", `/user/${userId}/messages/${recipientId}`).then(response => {\n        dispatch(loadMessages(response));\n        return resolve();\n      }).catch(error => {\n        return reject();\n      });\n    });\n  };\n};\nexport const sendMessage = (receiverId, body) => {\n  let userId = sessionStorage.getItem(\"userId\");\n  return dispatch => {\n    dispatch(startFetching());\n    return restApi(\"post\", `/user/${userId}/send-message/${receiverId}`, body).then(response => {\n      dispatch(removeError());\n      dispatch(loadMessages(response.messages));\n      let currentUser = response.currentUser;\n      dispatch(setCurrentUser(currentUser));\n    }).catch(error => {});\n  };\n};","map":{"version":3,"sources":["/Users/macbook/Desktop/App Foo Chat/foo-chat/client/src/redux/action/message.action.js"],"names":["GET_MESSAGES","restApi","removeError","addError","startFetching","setCurrentUser","loadMessages","messages","type","payload","getMessages","userId","recipientId","dispatch","Promise","resolve","reject","then","response","catch","error","sendMessage","receiverId","body","sessionStorage","getItem","currentUser"],"mappings":"AAAA,SAASA,YAAT,QAA6B,+BAA7B;AACA,SAASC,OAAT,QAAuB,oBAAvB;AACA,SAASC,WAAT,EAAsBC,QAAtB,QAAsC,iBAAtC;AACA,SAASC,aAAT,QAA8B,iBAA9B;AACA,SAASC,cAAT,QAA+B,eAA/B;AAEA,OAAO,MAAMC,YAAY,GAAIC,QAAD,KAAc;AACtCC,EAAAA,IAAI,EAAER,YADgC;AAEtCS,EAAAA,OAAO,EAAEF;AAF6B,CAAd,CAArB;AAMP,OAAO,MAAMG,WAAW,GAAG,CAACC,MAAD,EAASC,WAAT,KAAyB;AAChD,SAAOC,QAAQ,IAAG;AACd,WAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAmB;AAClC,aAAOf,OAAO,CAAC,KAAD,EAAQ,SAAQU,MAAO,aAAYC,WAAY,EAA/C,CAAP,CACFK,IADE,CACGC,QAAQ,IAAG;AACbL,QAAAA,QAAQ,CAACP,YAAY,CAACY,QAAD,CAAb,CAAR;AACA,eAAOH,OAAO,EAAd;AACH,OAJE,EAKFI,KALE,CAKIC,KAAK,IAAI;AACZ,eAAOJ,MAAM,EAAb;AACP,OAPM,CAAP;AAQH,KATM,CAAP;AAUH,GAXD;AAYH,CAbM;AAeP,OAAO,MAAMK,WAAW,GAAG,CAACC,UAAD,EAAYC,IAAZ,KAAoB;AAC3C,MAAIZ,MAAM,GAAGa,cAAc,CAACC,OAAf,CAAuB,QAAvB,CAAb;AACA,SAAOZ,QAAQ,IAAG;AACdA,IAAAA,QAAQ,CAACT,aAAa,EAAd,CAAR;AACA,WAAOH,OAAO,CAAC,MAAD,EAAU,SAAQU,MAAO,iBAAgBW,UAAW,EAApD,EAAuDC,IAAvD,CAAP,CACFN,IADE,CACIC,QAAD,IAAY;AACdL,MAAAA,QAAQ,CAACX,WAAW,EAAZ,CAAR;AACAW,MAAAA,QAAQ,CAACP,YAAY,CAACY,QAAQ,CAACX,QAAV,CAAb,CAAR;AACA,UAAImB,WAAW,GAAGR,QAAQ,CAACQ,WAA3B;AACAb,MAAAA,QAAQ,CAACR,cAAc,CAACqB,WAAD,CAAf,CAAR;AACH,KANE,EAOFP,KAPE,CAOKC,KAAD,IAAS,CACX,CARF,CAAP;AAUC,GAZL;AAaH,CAfM","sourcesContent":["import { GET_MESSAGES } from \"../actionType/user.actionType\";\r\nimport { restApi} from \"../../services/api\";\r\nimport { removeError, addError } from \"./errors.action\";\r\nimport { startFetching } from \"./fetch.actions\";\r\nimport { setCurrentUser } from \"./user.action\";\r\n\r\nexport const loadMessages = (messages) =>({\r\n    type: GET_MESSAGES,\r\n    payload: messages\r\n})\r\n\r\n\r\nexport const getMessages = (userId, recipientId) => {    \r\n    return dispatch =>{\r\n        return new Promise((resolve, reject)=>{\r\n            return restApi(\"get\",`/user/${userId}/messages/${recipientId}`)\r\n                .then(response =>{       \r\n                    dispatch(loadMessages(response))            \r\n                    return resolve()\r\n                })\r\n                .catch(error => {            \r\n                    return reject()\r\n            })\r\n        })\r\n    }\r\n}\r\n\r\nexport const sendMessage = (receiverId,body) =>{\r\n    let userId = sessionStorage.getItem(\"userId\");    \r\n    return dispatch =>{\r\n        dispatch(startFetching())\r\n        return restApi(\"post\", `/user/${userId}/send-message/${receiverId}`, body)\r\n            .then((response)=>{\r\n                dispatch(removeError())\r\n                dispatch(loadMessages(response.messages));\r\n                let currentUser = response.currentUser\r\n                dispatch(setCurrentUser(currentUser))\r\n            })\r\n            .catch((error)=>{\r\n                }\r\n            )\r\n        }\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}