{"ast":null,"code":"var _jsxFileName = \"/Users/macbook/Desktop/App Foo Chat/foo-chat/client/src/pages/group/group.component.jsx\";\nimport React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport ChatMessenger from '../../components/chat-messages/chat-messages.component';\nimport ChatSendBox from '../../components/chat-send-box/chat-send-box.component';\nimport { connect } from 'react-redux';\nimport { getGroupMembersById } from '../../redux/action/group.action';\nimport { receiveMessageForGroup, unRegisterUpdateRoomMembersStatus, updateRoomMembersStatus, enterRoom, exitRoom, unRegisterReceiveMessageForGroup } from '../../services/socketIo';\n\nclass GroupPage extends Component {\n  constructor(props) {\n    super(props);\n\n    this.updateRoomMembersStatus = response => {\n      this.props.getGroupMembersById(this.state.groupId).then(res => {\n        this.setState(prevState => ({ ...prevState,\n          onlineMembers: [...response.users],\n          groupMembers: [...res.members]\n        }));\n      });\n    };\n\n    this.setRooms = () => {\n      this.props.getGroupMembersById(this.state.groupId).then(response => {\n        this.setState(prevState => ({ ...prevState,\n          groupMembers: [...response.members]\n        }));\n      });\n    };\n\n    this.showProfile = user => {\n      user = this.props.users.filter(u => u.username === user)[0];\n      this.setState({\n        user\n      });\n    };\n\n    this.setGroupMessages = message => {\n      this.setState(prevState => ({ ...prevState,\n        messages: prevState.messages.concat(message)\n      }));\n    };\n\n    this.state = {\n      messages: [],\n      groupMembers: props.room.members,\n      groupId: props.match.params.groupId,\n      currentUser: props.currentUser,\n      onlineMembers: [],\n      showProfile: false,\n      user: null\n    };\n  }\n\n  componentDidMount() {\n    const {\n      currentUser,\n      groupId\n    } = this.state;\n    let username = currentUser.username;\n    receiveMessageForGroup(this.setGroupMessages);\n    updateRoomMembersStatus(this.updateRoomMembersStatus);\n    enterRoom(username, groupId);\n    this.props.getGroupMembersById(groupId);\n    this.setRooms(username);\n  }\n\n  componentWillUnmount() {\n    unRegisterReceiveMessageForGroup();\n    unRegisterUpdateRoomMembersStatus();\n    let roomId = this.state.groupId;\n    let username = this.state.currentUser.username;\n    exitRoom(username, roomId);\n  }\n\n  render() {\n    const {\n      user,\n      messages,\n      groupMembers,\n      onlineMembers,\n      groupId\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"section\", {\n      className: \"group__left-section\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"primary-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 13\n      }\n    }, \"Group Members\"), /*#__PURE__*/React.createElement(\"ul\", {\n      className: \"group-user__list\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }\n    }, groupMembers.map(member => /*#__PURE__*/React.createElement(\"li\", {\n      className: \"group-user__item\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: `group-user__status\n                          ${onlineMembers.some(onlineMember => onlineMember.username === member) ? \"online\" : \"offline\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"group-user__name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 21\n      }\n    }, member), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 21\n      }\n    })))))), /*#__PURE__*/React.createElement(\"section\", {\n      className: \"chatroom__main-section\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"chat-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"chat-area-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"chat-area\",\n      ref: this.chatArea,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 15\n      }\n    }, messages && messages.map(message => /*#__PURE__*/React.createElement(ChatMessenger, {\n      message: message,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 21\n      }\n    })))), /*#__PURE__*/React.createElement(ChatSendBox, {\n      getMessage: this.setGroupMessages,\n      groupId: groupId,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 13\n      }\n    })));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  currentUser: state.user.currentUser,\n  users: state.user.users,\n  room: state.groups.room\n});\n\nconst mapDispatchToProps = dispatch => ({\n  getGroupMembersById: id => dispatch(getGroupMembersById(id))\n});\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(GroupPage));","map":{"version":3,"sources":["/Users/macbook/Desktop/App Foo Chat/foo-chat/client/src/pages/group/group.component.jsx"],"names":["React","Component","withRouter","ChatMessenger","ChatSendBox","connect","getGroupMembersById","receiveMessageForGroup","unRegisterUpdateRoomMembersStatus","updateRoomMembersStatus","enterRoom","exitRoom","unRegisterReceiveMessageForGroup","GroupPage","constructor","props","response","state","groupId","then","res","setState","prevState","onlineMembers","users","groupMembers","members","setRooms","showProfile","user","filter","u","username","setGroupMessages","message","messages","concat","room","match","params","currentUser","componentDidMount","componentWillUnmount","roomId","render","map","member","some","onlineMember","chatArea","mapStateToProps","groups","mapDispatchToProps","dispatch","id"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport {withRouter} from 'react-router-dom'\r\nimport ChatMessenger  from '../../components/chat-messages/chat-messages.component';\r\nimport ChatSendBox from '../../components/chat-send-box/chat-send-box.component';\r\nimport {connect} from 'react-redux';\r\nimport { getGroupMembersById } from '../../redux/action/group.action';\r\nimport { \r\n\treceiveMessageForGroup,\r\n\tunRegisterUpdateRoomMembersStatus,\r\n\tupdateRoomMembersStatus,\r\n\tenterRoom,\r\n\texitRoom,\r\n\tunRegisterReceiveMessageForGroup } from '../../services/socketIo';\r\n\r\nclass GroupPage extends Component {\r\n  constructor (props) {\r\n  super(props)\r\n  this.state = {\r\n      messages:[],\r\n      groupMembers:props.room.members,\r\n      groupId:props.match.params.groupId,\r\n      currentUser:props.currentUser,\r\n      onlineMembers:[],\r\n      showProfile:false,\r\n      user:null\r\n      }\r\n    };\r\n\r\n\tupdateRoomMembersStatus = (response) =>{    \r\n\t\tthis.props.getGroupMembersById(this.state.groupId)\r\n\t\t.then(res => {\r\n\t\t\tthis.setState((prevState) => ({\r\n\t\t\t...prevState,\r\n\t\t\tonlineMembers:[...response.users],\r\n\t\t\tgroupMembers:[...res.members]\r\n\t\t\t})\r\n\t\t\t)\r\n\t\t})\r\n\t}\r\n  \r\n  componentDidMount() {\r\n    const {currentUser, groupId } = this.state;\r\n    let username = currentUser.username;      \r\n    receiveMessageForGroup(this.setGroupMessages)\r\n    updateRoomMembersStatus(this.updateRoomMembersStatus)\r\n    enterRoom(username, groupId);\r\n    this.props.getGroupMembersById(groupId)\r\n    this.setRooms(username)\r\n  }\r\n\r\n  componentWillUnmount(){\r\n    unRegisterReceiveMessageForGroup()\r\n    unRegisterUpdateRoomMembersStatus()\r\n    let roomId = this.state.groupId;\r\n    let username= this.state.currentUser.username;\r\n    exitRoom(username, roomId)\r\n  }\r\n\r\n  setRooms = () => {\r\n    this.props.getGroupMembersById(this.state.groupId)\r\n\t\t.then((response) => {          \r\n\t\t\tthis.setState((prevState) => ({\r\n\t\t\t\t...prevState,\r\n\t\t\t\tgroupMembers:[...response.members]\r\n            })\r\n          )\r\n      }\r\n    )\r\n  }\r\n\r\n  showProfile = (user) =>{\r\n    user = this.props.users.filter((u) => u.username === user)[0]\r\n    this.setState({ user})\r\n  }\r\n  \r\n  setGroupMessages = (message) =>{  \r\n    this.setState(prevState => ({\r\n      ...prevState,\r\n      messages: prevState.messages.concat(message)\r\n    })\r\n    )\r\n  }\r\n\r\n  render() {\r\n    const {user, messages, groupMembers, onlineMembers, groupId} =this.state        \r\n      return (\r\n        <div className=\"group\">\r\n          <section className=\"group__left-section\">\r\n            <h2 className=\"primary-header\">Group Members</h2>\r\n            <ul className=\"group-user__list\">\r\n              {groupMembers.map((member) => (\r\n                <li\r\n                  className=\"group-user__item\"\r\n                >\r\n                  <span\r\n                    className={`group-user__status\r\n                          ${\r\n                            onlineMembers.some(\r\n                              (onlineMember) => onlineMember.username === member\r\n                            )\r\n                              ? \"online\"\r\n                              : \"offline\"\r\n                          }`}\r\n                  ></span>\r\n                  <div className=\"group-user__name\">\r\n                    <span>{member}</span>\r\n                    <br></br>\r\n                  </div>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </section>\r\n\r\n          <section className=\"chatroom__main-section\">\r\n            <div className=\"chat-container\">\r\n              <div className=\"chat-area-header\"></div>\r\n              <div className=\"chat-area\" ref={this.chatArea}>\r\n                {messages &&\r\n                  messages.map((message) => (\r\n                    <ChatMessenger message={message} />\r\n                  ))}\r\n              </div>\r\n            </div>\r\n            <ChatSendBox getMessage={this.setGroupMessages} groupId={groupId} />\r\n          </section>\r\n        </div>\r\n      );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) =>({\r\n    currentUser:state.user.currentUser,\r\n    users: state.user.users,\r\n    room:state.groups.room\r\n\r\n })\r\n \r\nconst mapDispatchToProps = dispatch => ({\r\n  getGroupMembersById: id => dispatch(getGroupMembersById(id))\r\n})\r\n\r\n\r\nexport default withRouter(connect(mapStateToProps , mapDispatchToProps)(GroupPage));"]},"metadata":{},"sourceType":"module"}