{"ast":null,"code":"import { CURRENT_USER, GET_USERS, GET_USERS_STATUS } from '../actionType/user.actionType';\nimport { restApi, TokenHeader } from '../../services/api';\nimport { addError, removeError } from './errors.action';\nimport { setGroups } from './group.action';\nimport { startFetching } from './fetch.actions';\nimport { disconnectSocket, getOnlineUsers, updateUserInfo } from '../../services/socketIo';\nimport axios from 'axios';\nimport { toast } from 'react-toastify';\nexport const setAllUsers = users => ({\n  type: GET_USERS,\n  payload: users\n});\nexport const setCurrentUser = user => ({\n  type: CURRENT_USER,\n  payload: user\n});\nexport const setAllUsersStatus = (users, usersStatus) => ({\n  type: GET_USERS_STATUS,\n  payload: {\n    users: users,\n    usersStatus: usersStatus\n  }\n});\nexport const logOut = () => {\n  return dispatch => {\n    localStorage.clear();\n    sessionStorage.clear();\n    disconnectSocket();\n    dispatch(setCurrentUser({}));\n    setRestApiHeader(false);\n    dispatch(setAllUsersStatus([], []));\n    dispatch(setGroups(null));\n    dispatch(setEvents(null));\n    getOnlineUsers();\n    toast.success('User logged out');\n  };\n};\nexport const setRestApiHeader = token => {\n  TokenHeader(token);\n};\nexport const SignUp = (fileHeader, fileData, jsonData) => {\n  const formData = new FormData();\n  const userData = JSON.stringify(jsonData);\n  formData.append('file', fileData);\n  formData.append('data', userData);\n  return dispatch => {\n    return new Promise((resolve, reject) => {\n      return axios.post('/auth/register', formData, fileHeader).then(res => {\n        getOnlineUsers();\n        dispatch(removeError());\n        let response = res.data.message;\n        let currentUser = response.currentUser;\n        sessionStorage.setItem('userId', currentUser._id);\n        sessionStorage.setItem('validator', response.validator);\n        setRestApiHeader(response.validator);\n        dispatch(setCurrentUser(currentUser));\n        resolve(currentUser.username);\n      }).catch(error => {\n        console.log(error.response.data);\n        dispatch(addError(error.response.data.message));\n        reject();\n      });\n    });\n  };\n};\nexport function Login(type, userData) {\n  return dispatch => {\n    return new Promise((resolve, reject) => {\n      return restApi('post', `/auth/${type}`, userData).then(response => {\n        getOnlineUsers();\n        dispatch(removeError());\n        let currentUser = response.currentUser;\n        sessionStorage.setItem('userId', currentUser._id);\n        sessionStorage.setItem('validator', response.validator);\n        setRestApiHeader(response.validator);\n        dispatch(setCurrentUser(currentUser));\n        resolve(currentUser.username);\n      }).catch(error => {\n        dispatch(addError(error.message));\n        return reject();\n      });\n    });\n  };\n}\nexport function editUser(userData) {\n  let userId = sessionStorage.getItem('userId');\n  return dispatch => {\n    return new Promise((resolve, reject) => {\n      return restApi('post', `/user/${userId}/profile/edit`, userData).then(response => {\n        getOnlineUsers();\n        dispatch(removeError());\n        let currentUser = response;\n        dispatch(setCurrentUser(currentUser));\n        return resolve({\n          'success': 'Data Edited Successfully'\n        });\n      }).catch(error => {\n        return reject('Something went Wrong. Try Again Later');\n      });\n    });\n  };\n} //Check if user is authenticated \n\nexport function verifyUser() {\n  let token = sessionStorage.validator;\n  setRestApiHeader(token);\n  return dispatch => {\n    return new Promise((resolve, reject) => {\n      return restApi('get', '/authenticate-user').then(response => {\n        let currentUser = response.currentUser;\n        dispatch(setCurrentUser(currentUser));\n        sessionStorage.setItem('validator', response.validator);\n        sessionStorage.setItem('userId', currentUser._id);\n        setRestApiHeader(response.validator);\n        dispatch(removeError());\n        return resolve();\n      }).catch(() => {\n        localStorage.clear();\n        sessionStorage.clear();\n        disconnectSocket();\n        dispatch(setCurrentUser({}));\n        setRestApiHeader(false);\n        dispatch(setAllUsersStatus([], []));\n        dispatch(setGroups(null));\n        dispatch(setEvents(null));\n        toast.error('Please login again');\n        dispatch(addError('Please Login again'));\n        return reject();\n      });\n    });\n  };\n} //Get all the users registered\n\nexport const getAllUsers = () => {\n  return dispatch => {\n    return restApi('get', '/api/users').then(response => {\n      dispatch(setAllUsers(response));\n    }).catch(error => {});\n  };\n};\nexport const addFriend = addedUserId => {\n  let userId = sessionStorage.getItem('userId');\n  return dispatch => {\n    console.log(userId);\n    return restApi('get', `/user/${userId}/add-friend/${addedUserId}`).then(response => {\n      console.log(userId);\n      dispatch(removeError());\n      let currentUser = response.currentUser;\n      let users = response.filteredUsers;\n      dispatch(setAllUsers(users));\n      dispatch(setCurrentUser(currentUser));\n      getOnlineUsers();\n      toast.success(\"New Friend Added\");\n    }).catch(error => {\n      toast.error(\"Something wrong happened. Please try again later\");\n      console.log(error);\n    });\n  };\n};\nexport const getLocation = coords => {\n  let userId = sessionStorage.getItem('userId');\n  return dispatch => {\n    return new Promise((resolve, reject) => {\n      return restApi('post', `/user/${userId}/get-location`, coords).then(result => {\n        dispatch(removeError());\n        resolve(result);\n        return result;\n      }).catch(err => {\n        reject();\n      });\n    });\n  };\n};","map":{"version":3,"sources":["/Users/macbook/Desktop/App Foo Chat/simply-chat/client/src/redux/action/user.action.js"],"names":["CURRENT_USER","GET_USERS","GET_USERS_STATUS","restApi","TokenHeader","addError","removeError","setGroups","startFetching","disconnectSocket","getOnlineUsers","updateUserInfo","axios","toast","setAllUsers","users","type","payload","setCurrentUser","user","setAllUsersStatus","usersStatus","logOut","dispatch","localStorage","clear","sessionStorage","setRestApiHeader","setEvents","success","token","SignUp","fileHeader","fileData","jsonData","formData","FormData","userData","JSON","stringify","append","Promise","resolve","reject","post","then","res","response","data","message","currentUser","setItem","_id","validator","username","catch","error","console","log","Login","editUser","userId","getItem","verifyUser","getAllUsers","addFriend","addedUserId","filteredUsers","getLocation","coords","result","err"],"mappings":"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","sourcesContent":["import { \r\n    CURRENT_USER,\r\n    GET_USERS,\r\n    GET_USERS_STATUS\r\n    } from '../actionType/user.actionType'\r\nimport { restApi, TokenHeader } from '../../services/api';\r\nimport { addError, removeError} from './errors.action';\r\nimport { setGroups } from './group.action';\r\nimport { startFetching } from './fetch.actions';\r\nimport {disconnectSocket, getOnlineUsers, updateUserInfo } from '../../services/socketIo';\r\nimport axios from 'axios';\r\nimport {  toast } from 'react-toastify';\r\n\r\n\r\nexport const setAllUsers = (users) =>({\r\n    type: GET_USERS,\r\n    payload: users\r\n}) \r\n\r\nexport const setCurrentUser = (user) =>({\r\n    type: CURRENT_USER,\r\n    payload: user\r\n}) \r\n\r\nexport const setAllUsersStatus = (users, usersStatus) =>({\r\n    type: GET_USERS_STATUS,\r\n    payload: {\r\n        users: users,\r\n        usersStatus: usersStatus\r\n    }\r\n}) \r\n\r\nexport const logOut = () =>{\r\n    return dispatch =>{\r\n        localStorage.clear()\r\n        sessionStorage.clear()\r\n        disconnectSocket()\r\n        dispatch(setCurrentUser({}))\r\n        setRestApiHeader(false)\r\n        dispatch(setAllUsersStatus([],[]))\r\n        dispatch(setGroups(null))\r\n        dispatch(setEvents(null))\r\n        getOnlineUsers()\r\n        toast.success('User logged out')\r\n    }\r\n}\r\n\r\nexport const setRestApiHeader = (token) => {\r\n    TokenHeader(token)\r\n}\r\n\r\n\r\nexport const SignUp =  (fileHeader, fileData, jsonData) =>{\r\n    const formData = new FormData();\r\n    const userData =  JSON.stringify(jsonData);\r\n    formData.append('file', fileData);\r\n    formData.append('data', userData );\r\n    return dispatch =>{\r\n        return new Promise((resolve, reject)=>{\r\n        return axios.post('/auth/register', formData, fileHeader)\r\n            .then((res) =>{\r\n                getOnlineUsers()        \r\n                dispatch(removeError())\r\n                let response = res.data.message\r\n                let currentUser =  response.currentUser\r\n                sessionStorage.setItem('userId', currentUser._id);\r\n                sessionStorage.setItem('validator', response.validator)               \r\n                setRestApiHeader(response.validator)\r\n                dispatch(setCurrentUser(currentUser));    \r\n                resolve(currentUser.username)\r\n            })\r\n            .catch((error) =>{\r\n                console.log(error.response.data)\r\n                dispatch(addError(error.response.data.message))\r\n                reject()\r\n            })\r\n        })\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nexport function Login (type, userData){\r\n    return dispatch =>{\r\n        return new Promise((resolve, reject)=>{\r\n            return restApi('post', `/auth/${type}`, userData)\r\n                .then(response => {      \r\n                    getOnlineUsers()                      \r\n                    dispatch(removeError())\r\n                    let currentUser =  response.currentUser\r\n                    sessionStorage.setItem('userId', currentUser._id);\r\n                    sessionStorage.setItem('validator', response.validator)\r\n                    setRestApiHeader(response.validator)\r\n                    dispatch(setCurrentUser(currentUser));\r\n                    resolve(currentUser.username)\r\n                })\r\n\r\n                .catch((error)=>{                    \r\n                    dispatch(addError(error.message))\r\n                    return reject()\r\n                })\r\n        })\r\n    }\r\n}\r\n\r\nexport function editUser (userData){\r\n    let userId = sessionStorage.getItem('userId');\r\n    return dispatch =>{\r\n        return new Promise((resolve, reject)=>{\r\n            return restApi('post', `/user/${userId}/profile/edit`, userData)\r\n                .then(response => {           \r\n                    getOnlineUsers()        \r\n                    dispatch(removeError())\r\n                    let currentUser = response\r\n                    dispatch(setCurrentUser(currentUser));\r\n                    return resolve({'success':'Data Edited Successfully'})\r\n                })\r\n               \r\n                .catch((error)=>{                    \r\n                    return reject('Something went Wrong. Try Again Later')\r\n                })\r\n        })\r\n    }\r\n}\r\n\r\n//Check if user is authenticated \r\nexport function verifyUser () { \r\n    let token = sessionStorage.validator;\r\n    setRestApiHeader(token)\r\n    return dispatch =>{\r\n        return new Promise((resolve, reject)=>{\r\n            return restApi('get', '/authenticate-user')\r\n            .then((response) =>{                            \r\n                let currentUser = response.currentUser\r\n                dispatch(setCurrentUser(currentUser));\r\n                sessionStorage.setItem('validator', response.validator)\r\n                sessionStorage.setItem('userId', currentUser._id)     \r\n                setRestApiHeader(response.validator)\r\n                dispatch(removeError())                \r\n                return resolve()\r\n            })\r\n            .catch(()=>{\r\n                localStorage.clear()\r\n                sessionStorage.clear()\r\n                disconnectSocket()\r\n                dispatch(setCurrentUser({}))\r\n                setRestApiHeader(false)\r\n                dispatch(setAllUsersStatus([],[]))\r\n                dispatch(setGroups(null))\r\n                dispatch(setEvents(null))\r\n                toast.error('Please login again')\r\n                dispatch(addError('Please Login again'))\r\n                return reject()\r\n            })\r\n        })\r\n    }\r\n}    \r\n\r\n\r\n//Get all the users registered\r\nexport const getAllUsers = () =>{\r\n    return dispatch =>{\r\n        return restApi('get', '/api/users')\r\n            .then((response)=>{                   \r\n                dispatch(setAllUsers(response))\r\n            })\r\n            .catch((error)=>{\r\n            })\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport const addFriend =  (addedUserId) =>{   \r\n    let userId = sessionStorage.getItem('userId'); \r\n    return dispatch =>{\r\n        console.log(userId)\r\n        return restApi('get', `/user/${userId}/add-friend/${addedUserId}`)\r\n            .then((response)=>{  \r\n                console.log(userId)\r\n              \r\n                dispatch(removeError())            \r\n                let currentUser = response.currentUser\r\n                let users = response.filteredUsers\r\n                dispatch(setAllUsers(users))\r\n                dispatch(setCurrentUser(currentUser))\r\n                getOnlineUsers()        \r\n                toast.success(\"New Friend Added\")\r\n\r\n                })\r\n            .catch((error)=>{\r\n                toast.error(\"Something wrong happened. Please try again later\")\r\n\r\n                console.log(error)\r\n            })\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const getLocation = (coords) =>{\r\n    let userId = sessionStorage.getItem('userId');\r\n    return dispatch =>{\r\n    return new Promise((resolve, reject) =>{\r\n        return restApi('post', `/user/${userId}/get-location`, coords)\r\n            .then((result) => {                \r\n                dispatch(removeError())\r\n                resolve(result)\r\n                return result\r\n            }).catch((err) => {                \r\n                reject()\r\n            });\r\n        })\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}